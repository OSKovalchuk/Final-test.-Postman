{
	"info": {
		"_postman_id": "9780b680-46f2-4c76-b559-b073d0851b01",
		"name": "Final Test. Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11859997"
	},
	"item": [
		{
			"name": "Test Case 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Postman Test Script\r",
							"\r",
							"// Extract parameters from the request URL\r",
							"const firstname = pm.request.url.query.get('firstname');\r",
							"const lastname = pm.request.url.query.get('lastname');\r",
							"\r",
							"\r",
							"// Make the GET request to the specified endpoint\r",
							"pm.sendRequest({\r",
							"    url: 'https://postman-echo.com/get?firstname=Olga&lastname=Kovalchuk',\r",
							"    method: 'GET',\r",
							"    header: 'Content-Type:application/json',\r",
							"}, function (err, response) {\r",
							"    // Check if the request was successful (status code 200 OK)\r",
							"    pm.test('Status code is 200 OK', function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // Parse the JSON response body\r",
							"    const responseBody = pm.response.json();\r",
							"\r",
							"    // Check if the response contains the correct user details based on provided 'firstname' and 'lastname'\r",
							"    pm.test('Correct user details are returned', function () {\r",
							"        pm.expect(responseBody.args.firstname).to.include(firstname);\r",
							"        pm.expect(responseBody.args.lastname).to.include(lastname);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://postman-echo.com/get?firstname=Olga&lastname=Kovalchuk",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "firstname",
							"value": "Olga"
						},
						{
							"key": "lastname",
							"value": "Kovalchuk"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Case 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the endpoint URL\r",
							"const endpoint = \"https://postman-echo.com/post\";\r",
							"\r",
							"// Set the test data\r",
							"const testData = {\r",
							"  firstname: \"Olga\",\r",
							"  lastname: \"Kovalchuk\"\r",
							"};\r",
							"\r",
							"// Set the request body with the test data\r",
							"const requestBody = {\r",
							"  mode: \"raw\",\r",
							"  raw: JSON.stringify(testData),\r",
							"  options: {\r",
							"    raw: {\r",
							"      language: \"json\"\r",
							"    }\r",
							"  }\r",
							"};\r",
							"\r",
							"// Send a POST request to the endpoint with the test data\r",
							"pm.sendRequest({\r",
							"  url: endpoint,\r",
							"  method: \"POST\",\r",
							"  header: {\r",
							"    \"Content-Type\": \"application/json\"\r",
							"  },\r",
							"  body: requestBody\r",
							"}, function (err, res) {\r",
							"  // Assert the status code is OK (200)\r",
							"  pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(res.code).to.equal(200);\r",
							"  });\r",
							"\r",
							"  // Parse the response body as JSON\r",
							"  var responseBody = res.json();\r",
							"\r",
							"  // Assert the correct user information in the response body\r",
							"  pm.test(\"Response contains args, data, files, form, headers, json, and url properties\", function () {\r",
							"    pm.expect(responseBody).to.have.property(\"args\");\r",
							"    pm.expect(responseBody).to.have.property(\"data\");\r",
							"    pm.expect(responseBody).to.have.property(\"files\");\r",
							"    pm.expect(responseBody).to.have.property(\"form\");\r",
							"    pm.expect(responseBody).to.have.property(\"headers\");\r",
							"    pm.expect(responseBody).to.have.property(\"json\");\r",
							"    pm.expect(responseBody).to.have.property(\"url\");\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://postman-echo.com/post?firstname=Olga&lastname=Kovalchuk",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"post"
					],
					"query": [
						{
							"key": "firstname",
							"value": "Olga"
						},
						{
							"key": "lastname",
							"value": "Kovalchuk"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Case 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the endpoint URL\r",
							"const endpoint = \"https://postman-echo.com/get?const username=postman&const password=NOT KNOWN TO THE USER\";\r",
							"\r",
							"// Send a GET request to the endpoint\r",
							"pm.sendRequest({\r",
							"  url: endpoint,\r",
							"  method: \"GET\"\r",
							"}, function (err, response) {\r",
							"  // Parse the response body as JSON\r",
							"  const responseBodyJSON = response.json();\r",
							"\r",
							"  // Assert the status code is 200 (OK)\r",
							"  pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"  });\r",
							"\r",
							"  // Assert that the response contains the expected args\r",
							"  pm.test(\"Response contains expected args\", function () {\r",
							"    pm.expect(responseBodyJSON.args).to.eql({ \"const username\": \"postman\", \"const password\": \"NOT KNOWN TO THE USER\" });\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://postman-echo.com/get?const username=postman&const password=NOT KNOWN TO THE USER",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"get"
					],
					"query": [
						{
							"key": "const username",
							"value": "postman"
						},
						{
							"key": "const password",
							"value": "NOT KNOWN TO THE USER"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Case 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Set the endpoint URL\r",
							"const endpoint = \"https://postman-echo.com/basic-auth\";\r",
							"\r",
							"// Set the test credentials\r",
							"const username = \"postman\";\r",
							"const password = \"cG9zdG1hbjpwYXNzd29yZA==\"; // Base64-encoded \"postman:password\"\r",
							"\r",
							"// Decode the base64-encoded credentials to extract the password\r",
							"const decodedCredentials = atob(password);\r",
							"const [extractedUsername, extractedPassword] = decodedCredentials.split(':');\r",
							"\r",
							"// Set the extracted credentials for basic authentication\r",
							"const authorizationHeader = `Basic ${btoa(`${username}:${extractedPassword}`)}`;\r",
							"\r",
							"// Send a GET request to the secured endpoint with basic authentication\r",
							"pm.sendRequest({\r",
							"  url: endpoint,\r",
							"  method: \"GET\",\r",
							"  header: {\r",
							"    \"Authorization\": authorizationHeader\r",
							"  }\r",
							"}, (err, response) => {\r",
							"  // Log the extracted username and password\r",
							"  console.log(\"Extracted Username:\", extractedUsername);\r",
							"  console.log(\"Extracted Password:\", extractedPassword);\r",
							"\r",
							"  // Assert the status code is 200 (OK)\r",
							"  pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"  });\r",
							"\r",
							"  // Convert the response body to JSON\r",
							"  let responseBody;\r",
							"  try {\r",
							"    responseBody = JSON.parse(response.body);\r",
							"  } catch (error) {\r",
							"    responseBody = response.body;\r",
							"  }\r",
							"\r",
							"  // Assert that the response indicates valid authentication\r",
							"  pm.test(\"Response indicates valid authentication\", function () {\r",
							"    pm.expect(responseBody).to.eql({ \"authenticated\": true });\r",
							"  });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "authorizationHeader",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth?=&=",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					],
					"query": [
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		}
	]
}